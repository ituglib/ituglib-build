/** RSync Pipeline for J-series */
def downloadVersion
def runTests
def destinationUser
def destinationHost
def destinationPort

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
        skipDefaultCheckout()
    }
    stages {
        stage('setup') {
            steps {
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '', description: 'RSync version', name: 'input'),
                            booleanParam(defaultValue: true, description: 'Run tests', name: 'tests'),
                            string(defaultValue: 'ituglib.randall', description: 'Destination User', name: 'user'),
                            string(defaultValue: 'tcmvns.tcmsupport.com', description: 'Destination Host', name: 'host'),
                            string(defaultValue: '49284', description: 'Destination Port', name: 'port'),
	                        ])
	                downloadVersion = userInput.input
	                runTests = userInput.tests
	                destinationUser = userInput.user
	                destinationHost = userInput.host
	                destinationPort = userInput.port
                }
            }
        }
        stage('ituglib') {
            steps {
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('unpack') {
            steps {
                withEnv(["RSYNC_VERSION=${downloadVersion}",
                         'RSYNC_URL_PREFIX=https://download.samba.org/pub/rsync/',
                         'DOWNLOADS=/home/ituglib/randall/downloads']){
                    cleanWs()
                    sh 'test -f ${DOWNLOADS}/rsync-${RSYNC_VERSION}.tar.gz || curl --insecure ${RSYNC_URL_PREFIX}rsync-${RSYNC_VERSION}.tar.gz -o ${DOWNLOADS}/rsync-${RSYNC_VERSION}.tar.gz'
                    sh 'tar xzf ${DOWNLOADS}/rsync-${RSYNC_VERSION}.tar.gz'
                    sh 'mv rsync-${RSYNC_VERSION}/* .'
                }
            }
        }
        /* TODO: 64 Bit RSync with OpenSSL 3.0 */
        stage('config') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/coreutils/include" LDFLAGS="-L/usr/coreutils/lib" conf_script_floss_cc --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make test || echo "Hardlinks fails for timeouts. Check that"'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=rsync',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                         '_RLD_LIB_PATH=:/usr/local/lib',
                         'BASENAME=rsync',
                         "DOWNLOAD_VERSION=$downloadVersion",
                         'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=rsync',
                        'DEST=/home/ituglib/randall/stage',
                        "REMOTE=-oPort=${destinationPort} ${destinationUser}@${destinationHost}",
                        'REMOTE_DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE; fi'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
        stage('config-1.1') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'rm -rf ${WORKSPACE}/install'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl1.1/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl1.1/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl1.1 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-1.1') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-1.1') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make test || echo "Hardlinks fails for timeouts. Check that"'
                }
            }
        }
        stage('install-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl1.1',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl1.1',
                        "DOWNLOAD_VERSION=$downloadVersion",
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl1.1/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl1.1',
                        'DEST=/home/ituglib/randall/stage',
                        "REMOTE=-oPort=${destinationPort} ${destinationUser}@${destinationHost}",
                        'REMOTE_DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl1.1/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE; fi'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
        stage('config-3.0') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'rm -rf ${WORKSPACE}/install'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.0/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.0/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.0 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.0') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.0') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make test || echo "Hardlinks fails for timeouts. Check that"'
                }
            }
        }
        stage('install-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.0',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.0',
                        "DOWNLOAD_VERSION=$downloadVersion",
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.0/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.0',
                        'DEST=/home/ituglib/randall/stage',
                        "REMOTE=-oPort=${destinationPort} ${destinationUser}@${destinationHost}",
                        'REMOTE_DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.0/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE; fi'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins NSBLDE4] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}
