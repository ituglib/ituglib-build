/* OpenSSH - Jenkins Pipeline for \CGNAC1 */

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
    }
    triggers {
        pollSCM('H H * * *')
    }
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                branches: [[name: '*/ituglib_release2']],
                extensions: [
                    [$class: 'CleanBeforeCheckout']],
                doGenerateSubmoduleConfigurations: false, extensions: [
                    [$class: 'CleanCheckout'],
                    [$class: 'CloneOption', timeout: 120, shallow: true],
                    [$class: 'CheckoutOption', timeout: 120],
                    ],
                userRemoteConfigs: [[url: 'https://github.com/rsbeckerca/openssh-portable.git']]])
            }
        }
        stage('ituglib') {
            steps {
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('autoreconf') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'autoreconf'
                }
            }
        }
        stage('config') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'CPPFLAGS="-WRVU=L20.10 -I/usr/local/include" LDFLAGS="-L/usr/local/lib" CC=c99 conf_script_floss_cc PREFIX=/usr/local --without-openssl-header-check --disable-utmpx'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignoring Findcalla_floss errors"'
                }
            }
        }
        stage('test') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make -k tests || echo "Tests failed but expected"'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=openssh',
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/ssh" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=openssh',
                        'DEST=/home/ituglib/randall/stage',
                        'REMOTE=-oPort=29284 randall@itug-lib.xid.com',
                        'REMOTE_DEST=/web/stage']) {
                    sh 'echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
        stage('autoreconf-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'autoreconf'
                }
            }
        }
        stage('config-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'CPPFLAGS="-WRVU=L20.10 -I/usr/local-ssl1-1/include -I/usr/local/include" LDFLAGS="-L/usr/local-ssl1.1/lib -L/usr/local/lib" CC=c99 conf_script_floss_cc PREFIX=/usr/local-ssl1.1 --with-ssl-dir=/usr/local-ssl1.1 --without-openssl-header-check --disable-utmpx'
                }
            }
        }
        stage('build-1.1') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignoring Findcalla_floss errors"'
                }
            }
        }
        stage('test-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make -k tests || echo "Tests failed but expected"'
                }
            }
        }
        stage('install-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=openssh-ssl1.1',
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/ssh" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=openssh-ssl1.1',
                        'DEST=/home/ituglib/randall/stage',
                        'REMOTE=-oPort=29284 randall@itug-lib.xid.com',
                        'REMOTE_DEST=/web/stage']) {
                    sh 'echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
        stage('autoreconf-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'autoreconf'
                }
            }
        }
        stage('config-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'CPPFLAGS="-WRVU=L20.10 -I/usr/local-ssl3.0/include -I/usr/local/include" LDFLAGS="-L/usr/local-ssl3.0/lib -L/usr/local/lib" CC=c99 conf_script_floss_cc PREFIX=/usr/local-ssl3.0 --with-ssl-dir=/usr/local-ssl3.0 --without-openssl-header-check --disable-utmpx'
                }
            }
        }
        stage('build-3.0') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignoring Findcalla_floss errors"'
                }
            }
        }
        stage('test-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make -k tests || echo "Tests failed but expected"'
                }
            }
        }
        stage('install-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=openssh-ssl3.0',
                        'DEST=/home/ituglib/randall/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/ssh" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('remote-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=openssh-ssl3.0',
                        'DEST=/home/ituglib/randall/stage',
                        'REMOTE=-oPort=29284 randall@itug-lib.xid.com',
                        'REMOTE_DEST=/web/stage']) {
                    sh 'echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE'
                    sh 'rm ${DEST}/${BASENAME}-*'
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins CGNAC1] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}
