/* Git Jenkins Test Monitor Pipeline for TNS/V */

def runTests
def localStaging
def expatRoot

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }
    triggers {
        pollSCM('30-55 2 * * 6')
    }
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    changelog: true,
                    poll: true,
                    branches: [[name: "seen"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true,
                                recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
                    doGenerateSubmoduleConfigurations: false, extensions: [
                        [$class: 'CleanCheckout'],
                        [$class: 'CloneOption', timeout: 120, shallow: true],
                        [$class: 'CheckoutOption', timeout: 120],
                        ],
                    userRemoteConfigs: [[url: 'https://github.com/git/git.git']]])
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
                dir('../Git_ManPages') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'master']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/gitster/git-manpages.git']]])
                }
                script {
                	load "../Ituglib_Build/Jenkinsfile.globals.all"
                	load "../Ituglib_Build/Jenkinsfile.globals.nsx"
                	localStaging = "${LOCAL_STAGING}"
                	expatRoot = "${EXPAT_ROOT}"
                	runTests = true
                }
            }
        }
        stage('build-3.0') {
            steps {
                withEnv(["GIT_DIST=${localStaging}",
                        'PREFIX=/usr/local-ssl3.0',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh "/usr/coreutils/bin/make V=1 prefix=${PREFIX} CFLAGS=\"-g -O2 -Winline -I/usr/local-ssl3.0/include -I/usr/coreutils/include -I${expatRoot}/include\" LDFLAGS=\"/usr/coreutils/lib/libz.a -L/usr/local-ssl3.0/lib -L/usr/coreutils/lib -L${expatRoot}/lib\" SHELL=/usr/coreutils/bin/bash"
                }
            }
        }
        stage('findcall_floss-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignoring results"'
                }
            }
        }
        stage('test-3.0') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh "/usr/coreutils/bin/make -k test V=1 CFLAGS=\"-g -O2 -Winline -I/usr/local-ssl3.0/include -I/usr/coreutils/include -I${expatRoot}/include\" LDFLAGS=\"/usr/coreutils/lib/libz.a -L/usr/local-ssl3.0/lib -L/usr/coreutils/lib -L${expatRoot}/lib\"  TEST_LINT= SHELL=/usr/coreutils/bin/bash || echo \"Git Test FAILURE, however t9001 and t9020 always fail\""
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
    }
}
