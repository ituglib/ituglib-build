/*
 Paste the rest of this file into a standard Pipeline project to
 build/test/stage xz NSX standard.
 Also set Discard old builds, typically log rotation to 2
 Poll SCM something useful, like H/45 2 * * *, remember that this job takes
 a long time to clone and checkout.
 Whomever the user is running this (a.k.a. Jenkins), must have proper
 credentials in NonStop SSH.
*/

def localStaging
def downloadVersion

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
        skipDefaultCheckout()
    }
    triggers {
        pollSCM('H H H * *')
    }
    stages {
        stage('checkout') {
            steps {
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('setup') {
            steps {
                script {
                	load "../Ituglib_Build/Jenkinsfile.globals.all"
                	load "../Ituglib_Build/Jenkinsfile.globals.nsx"
                	localStaging = "${LOCAL_STAGING}"
                }
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '', description: 'Xz Version', name: 'input'),
                        ])
                    downloadVersion = userInput
                }
            }
        }
        stage('unpack') {
            steps {
                withEnv(["XZ_VERSION=${downloadVersion}",
               			 'XZ_URL_PREFIX=https://tukaani.org/xz',
                         'DOWNLOADS=/home/jenkinsbuild/downloads']){
                    cleanWs()
                    sh 'test -f ${DOWNLOADS}/xz-${XZ_VERSION}.tar.gz || curl --insecure -L ${XZ_URL_PREFIX}/xz-${XZ_VERSION}.tar.gz -o ${DOWNLOADS}/xz-${XZ_VERSION}.tar.gz'
                    sh 'tar xf ${DOWNLOADS}/xz-${XZ_VERSION}.tar.gz'
                    sh 'mv xz-${XZ_VERSION}/* .'
                }
            }
        }
        stage('patch') {
			steps {
	        	sh 'sed "/<poll.h>/a #endif" -i src/xz/file_io.c'
	        	sh 'sed "/<poll.h>/i #ifdef __TANDEM" -i src/xz/file_io.c'
	        	sh 'sed "/<poll.h>/i #define _FLOSS_USE_POLL" -i src/xz/file_io.c'
	        	sh 'sed "/<poll.h>/i #include <floss.h(floss_poll)>" -i src/xz/file_io.c'
	        	sh 'sed "/<poll.h>/i #else" -i src/xz/file_io.c'
        	}
        }
        stage('redate') {
            steps {
                script {
                    currentTime = sh(returnStdout: true, script: 'date +%Y%m%d%H%M.%S').trim()
                    sh(returnStdout: true, script: 'echo Set all files to '+currentTime+' to inhibit aclocal-1.16 requirement')
                    sh(returnStdout: true, script: 'find . -exec touch -t '+currentTime+' {} ";" || echo Ignore any errors')
                }
            }
        }
        stage('config') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local/lib']) {
                    sh 'CFLAGS="-c99" CPPFLAGS="-Wnowarn=1252,272,734 -D_PUT_MODEL_ -I/usr/include -I/usr/local/include" LDFLAGS="-lput -lfloss" conf_script_floss_cc'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignore pthread errors"'
                }
            }
        }
        stage('test') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make check'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=xz',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/xz" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('config-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local/lib']) {
                    sh 'make clean'
                    sh "rm -rvf ${WORKSPACE}/install"
                    sh 'CFLAGS="-c99" CPPFLAGS="-Wnowarn=1252,272,734 -D_PUT_MODEL_ -Wlp64 -I/usr/include -I/usr/local/include" LDFLAGS="-Wlp64 -lput -lfloss64" conf_script_floss_cc --libdir=/usr/local/lib64 --bindir=/usr/local/bin64'
                }
            }
        }
        stage('build-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Ignore pthread errors"'
                }
            }
        }
        stage('test-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make check'
                }
            }
        }
        stage('install-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=xz-64',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin64/xz" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
    }
}
