/** RSync Pipeline for L-series */
def buildVersion
def runTests
def localStaging

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }
    triggers {
        pollSCM('H H * * *')
    }
    stages {
        stage('setup') {
            steps {
				timeout(time: 120, unit: 'SECONDS') {
				    script {
	                    def userInput = input(id: 'userInput', message: 'Build Settings?',
	                        parameters: [
	                            string(defaultValue: '', description: 'RSync ref to build', name: 'version'),
	                            booleanParam(defaultValue: true, description: 'Run tests', name: 'tests'),
	                        ])
	                    buildVersion = userInput.version
	                    runTests = userInput.tests
	                }
                }
            }
        }
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    changelog: true,
                    poll: true,
                    branches: [[name: "refs/tags/v${buildVersion}"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true,
                                recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
                    doGenerateSubmoduleConfigurations: false, extensions: [
                        [$class: 'CleanCheckout'],
                        [$class: 'CloneOption', timeout: 120, shallow: true],
                        [$class: 'CheckoutOption', timeout: 120],
                        ],
	                userRemoteConfigs: [[url: 'https://github.com/RsyncProject/rsync.git']]])
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
                script {
                	load "../Ituglib_Build/Jenkinsfile.globals.all"
                	load "../Ituglib_Build/Jenkinsfile.globals.nsx"
                	localStaging = "${LOCAL_STAGING}"
                }
            }
        }
        stage('config') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/coreutils/include" LDFLAGS="-L/usr/coreutils/lib" conf_script_floss_cc --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=rsync',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                         '_RLD_LIB_PATH=:/usr/local/lib',
                         'BASENAME=rsync',
                         "DEST=${localStaging}"]) {
                        sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-1.1') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl1.1/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl1.1/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl1.1 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-1.1') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-1.1') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl1.1',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl1.1',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl1.1/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.0') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.0/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.0/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.0 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.0') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.0') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.0',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.0',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.0/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.0_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib64:/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CC=c99 CFLAGS="-Wlp64 -Wnowarn=734" CPPFLAGS="-I/usr/local-ssl3.0/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.0/lib64 -L/usr/local-ssl3.0/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.0 --bindir=/usr/local-ssl3.0/bin64 --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
//                    sh 'CFLAGS="-c99 -Wlp64 -Wnowarn=734 -I/usr/local-ssl3.0/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.0/lib64 -L/usr/local-ssl3.0/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.0 --bindir=/usr/local-ssl3.0/bin64 --disable-iconv --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.0_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.0_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.0_64') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.0_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.0',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.0_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.0',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.0/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.2') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.2/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.2/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.2 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.2') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.2') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.2') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.2') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.2',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.2') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.2',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.2/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.2_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib64:/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CC=c99 CFLAGS="-Wlp64 -Wnowarn=734" CPPFLAGS="-I/usr/local-ssl3.2/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.2/lib64 -L/usr/local-ssl3.2/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.2 --bindir=/usr/local-ssl3.2/bin64 --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
//                    sh 'CFLAGS="-c99 -Wlp64 -Wnowarn=734 -I/usr/local-ssl3.2/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.2/lib64 -L/usr/local-ssl3.2/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.2 --bindir=/usr/local-ssl3.2/bin64 --disable-iconv --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.2_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.2_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.2_64') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.2_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.2',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.2_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.2/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.2',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.2/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.3') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.3/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.3/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.3 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.3') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.3') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.3') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.3') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.3',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.3') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.3',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.3/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.3_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib64:/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CC=c99 CFLAGS="-Wlp64 -Wnowarn=734" CPPFLAGS="-I/usr/local-ssl3.3/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.3/lib64 -L/usr/local-ssl3.3/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.3 --bindir=/usr/local-ssl3.3/bin64 --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
//                    sh 'CFLAGS="-c99 -Wlp64 -Wnowarn=734 -I/usr/local-ssl3.3/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.3/lib64 -L/usr/local-ssl3.3/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.3 --bindir=/usr/local-ssl3.3/bin64 --disable-iconv --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.3_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.3_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.3_64') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.3_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.3',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.3_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.3/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.3',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.3/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.4') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.4/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.4/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.4 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.4') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.4') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.4') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.4') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.4',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.4') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.4',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.4/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.4_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib64:/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CC=c99 CFLAGS="-Wlp64 -Wnowarn=734" CPPFLAGS="-I/usr/local-ssl3.4/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.4/lib64 -L/usr/local-ssl3.4/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.4 --bindir=/usr/local-ssl3.4/bin64 --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
//                    sh 'CFLAGS="-c99 -Wlp64 -Wnowarn=734 -I/usr/local-ssl3.4/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.4/lib64 -L/usr/local-ssl3.4/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.4 --bindir=/usr/local-ssl3.4/bin64 --disable-iconv --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.4_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.4_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.4_64') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.4_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.4',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.4_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.4/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.4',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.4/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.5') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CFLAGS="-c99 -Wnowarn=734 -I/usr/local-ssl3.5/include -I/usr/coreutils/include" LDFLAGS="-L/usr/local-ssl3.5/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.5 --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.5') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.5') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.5') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.5') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.5',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.5') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib',
                        'BASENAME=rsync-ssl3.5',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.5/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
        stage('config-3.5_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib64:/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'git clean -dxf'
                    sh 'CC=c99 CFLAGS="-Wlp64 -Wnowarn=734" CPPFLAGS="-I/usr/local-ssl3.5/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.5/lib64 -L/usr/local-ssl3.5/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.5 --bindir=/usr/local-ssl3.5/bin64 --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
//                    sh 'CFLAGS="-c99 -Wlp64 -Wnowarn=734 -I/usr/local-ssl3.5/include -I/usr/coreutils/include" LDFLAGS="-Wlp64 -L/usr/local-ssl3.5/lib64 -L/usr/local-ssl3.5/lib -L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.5 --bindir=/usr/local-ssl3.5/bin64 --disable-iconv --disable-locale --disable-md2man --disable-xxhash --disable-lz4 --disable-zstd'
                }
            }
        }
        stage('build-3.5_64') {
            steps {
                withEnv(['PREFIX=/usr/local',
                        'PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('floss-3.5_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails. ignored."'
                }
            }
        }
        stage('test-3.5_64') {
        	when {
        		expression {
        			return runTests;
        		}
        	}
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib']) {
                    sh 'make test'
                }
            }
        }
        stage('install-3.5_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.5',
                        'DEST=install']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-3.5_64') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=/usr/local-ssl3.5/lib:/usr/local/lib',
                        'BASENAME=rsync_64-ssl3.5',
                        "DEST=${localStaging}"]) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.5/bin/rsync" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && TESTV=`echo $VERSION | fgrep dev`;if [ "$TESTV" != "" ]; then echo "Development Version Suppressed"; else bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest; fi'
                }
            }
        }
	}
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}
