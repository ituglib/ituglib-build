/* Nano pipeline for TNS/V - requires the tarball, not git. */

def downloadVersion
def downloadSeries

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
        skipDefaultCheckout()
    }
    stages {
        stage('setup') {
            steps {
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '', description: 'Nano Version', name: 'input'),
                            string(defaultValue: 'v8', description: 'Nano Series', name: 'series'),
                        ])
                    downloadVersion = userInput.input
                    downloadSeries = userInput.series
                }
            }
        }
        stage('ituglib') {
            steps {
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('unpack') {
            steps {
                withEnv(["NANO_VERSION=${downloadVersion}",
                         "NANO_URL_PREFIX=https://www.nano-editor.org/dist/${downloadSeries}/",
                         'DOWNLOADS=/home/jenkinsbuild/downloads']){
                    cleanWs()
                    sh 'test -f ${DOWNLOADS}/nano-${NANO_VERSION}.tar.gz || curl --insecure ${NANO_URL_PREFIX}nano-${NANO_VERSION}.tar.gz -o ${DOWNLOADS}/nano-${NANO_VERSION}.tar.gz'
                    sh 'tar xzf ${DOWNLOADS}/nano-${NANO_VERSION}.tar.gz'
                    sh 'mv nano-${NANO_VERSION}/* .'
                }
            }
        }
        stage('patch') {
            steps {
                sh 'sed "/#include <string.h>/a#include <strings.h>" --in-place src/chars.c'
                sh 'sed "/#include <unistd.h>/a#include <strings.h>" --in-place src/files.c'
                sh 'sed "/#include <unistd.h>/a#include <netdb.h>" --in-place src/files.c'
                sh 'sed "/SA_RESETHAND/d" --in-place src/nano.c'
                sh 'sed "/tv_nsec == /d" --in-place src/text.c'
                sh 'sed "/st_mtim.tv_sec == /s/&& /) {/" --in-place src/text.c'
                sh 'sed "/st_mtim.tv_sec == /s/st_mtim.tv_sec/st_mtime/" --in-place src/text.c'
                sh 'sed "/timestamp_sec = /s/(long)fileinfo.st_mtim.tv_sec/(long)fileinfo.st_mtime/" --in-place src/text.c'
                sh 'sed "/timestamp_nsec = /s/(long)fileinfo.st_mtim.tv_nsec/0/" --in-place src/text.c'
                sh 'sed "/(long)fileinfo.st_mtime == timestamp_sec &&/s/(long)fileinfo.st_mtime == timestamp_sec &&/(long)fileinfo.st_mtime == timestamp_sec) {/" --in-place src/text.c'
                sh 'sed "/get __argv declaration/a #endif" --in-place lib/getprogname.c'
                sh 'sed "/get __argv declaration/a # include <cextdecs.h>" --in-place lib/getprogname.c'
                sh 'sed "/get __argv declaration/a # include <string.h>" --in-place lib/getprogname.c'
                sh 'sed "/get __argv declaration/a # include <unistd.h>" --in-place lib/getprogname.c'
                sh 'sed "/get __argv declaration/a # include <sys/types.h>" --in-place lib/getprogname.c'
                sh 'sed "/get __argv declaration/a #ifdef __TANDEM" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i # elif defined __TANDEM" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    static char ossPath[2049];" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    int error;" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    short items[]={93};" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    short result[1049];" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    char *path;" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    char *base;" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    short length;" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    error = PROCESS_GETINFOLIST_(,,,,, items,(short)(sizeof(items)/sizeof(items[0])),result, (short)(sizeof(result)/sizeof(short)), &length,,,,,,,,getpid());" --in-place lib/getprogname.c'
                sh 'sed "/^# else\$/i    if (error)" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i       return ~~?~~;" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    path = (char *)&result[1];" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    path[result[0]] = (char)0;" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    base = strrchr(path, (char)057);" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    path = (base) ? base+1 : path;" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    strcpy(ossPath, path);" --in-place lib/getprogname.c'
  				sh 'sed "/^# else\$/i    return ossPath;" --in-place lib/getprogname.c'
  				sh "sed 's/~~/\"/g' --in-place lib/getprogname.c"
  				sh "sed 's/memory_full ()//g' --in-place lib/alloca.c"
  				sh 'echo "Patches applied"'
            }
        }
        stage('config') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'CFLAGS="-c99" CPPFLAGS="-D_XOPEN_SOURCE_EXTENDED=1 -Wextensions -I/usr/coreutils/include -I/usr/coreutils/include/ncurses" LDFLAGS="-L/usr/coreutils/lib" conf_script_floss_cc --prefix=/usr/local'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "Probably fails but that is probably ok"'
                }
            }
        }
        stage('test') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make check || echo "Tests failed but expected"'
                }
            }
        }
        stage('deploy_src') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=nano',
                        'DEST=/web/stage']) {
                    sh '. "${WORKSPACE}/../Ituglib_Build/dist.info" && \
                        tar cvzf "${DEST}/${BASENAME}-${VERSION}-src.tar.gz" \
                            --exclude="*.o" \
                            --exclude="*.a" \
                            --exclude="*.so" \
                            --exclude=".git*" \
                            --exclude="./.git/*" \
                            .'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        'BASENAME=nano',
                        'DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/nano" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}

