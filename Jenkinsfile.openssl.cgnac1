# Paste the rest of this file into a standard Pipeline project to
# build/test/stage OpenSSL NSX standard.
# Also set Discard old builds, typically log rotation to 2
# Poll SCM something useful, like H/2 2 * * *, remember that this job takes
# a long time to clone and checkout.
# Whomever the user is running this (a.k.a. Jenkins), must have proper
# credentials in NonStop SSH.

node {
    stage('checkout') {
        checkout([$class: 'GitSCM',
        branches: [[name: '*/nonstop_port']],
        extensions: [
            [$class: 'CleanBeforeCheckout']],
        doGenerateSubmoduleConfigurations: false, extensions: [
            [$class: 'CleanCheckout'],
            [$class: 'CloneOption', timeout: 60, shallow: true],
            [$class: 'CheckoutOption', timeout: 60],
            ],
        userRemoteConfigs: [[url: 'ssh://randall@ituglib-nskos.xid.com/home/git/openssl.1.1.1_nsk']]])
    }
    stage('config') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib']) {
            sh './Configure nonstop-nsx --prefix=${PWD}/install --openssldir=${PWD}/install no-dynamic-engine --with-rand-seed=egd'
        }
    }
    stage('build') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib']) {
            sh 'make'
        }
    }
    stage('findcall_floss') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib']) {
            sh 'findcall_floss'
        }
    }
    stage('test') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib']) {
            sh '_RLD_LIB_PATH=${WORKSPACE}:/usr/local/lib make test || echo "Nevermind"'
        }
    }
    stage('install') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib']) {
            sh 'make install'
        }
    }
    stage('deploy') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib',
                'BASENAME=openssl',
                'DEST=/home/ituglib/randall/stage']) {
            sh '_RLD_LIB_PATH=${WORKSPACE}/install/lib:/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/bin/openssl" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
        }
    }
    stage('remote') {
        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                '_RLD_LIB_PATH=:/usr/local/lib',
                'BASENAME=openssl',
                'DEST=/home/ituglib/randall/stage',
                'REMOTE=randall@ituglib-nskos.xid.com',
                'REMOTE_DEST=/web/stage']) {
            sh 'echo "put $DEST/${BASENAME}-* $REMOTE_DEST" | /G/system/zssh/sftposs $REMOTE'
            sh 'rm ${DEST}/${BASENAME}-*'
        }
    }
}

