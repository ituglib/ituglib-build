/* GnuPG pipeline for TNS/V - requires the tarball, not git. */

def downloadVersion

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
    }
    stages {
        stage('setup') {
            steps {
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '1.4.23', description: 'GnuPG Version', name: 'input'),
                        ])
                    downloadVersion = userInput
                }
            }
        }
        stage('ituglib') {
            steps {
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('unpack') {
            steps {
                withEnv(["GNUPG_VERSION=${downloadVersion}",
               			 'GNUPG_URL_PREFIX=https://gnupg.org/ftp/gcrypt/gnupg/',
                         'DOWNLOADS=/home/jenkinsbuild/downloads']){
                    cleanWs()
                    sh 'test -f ${DOWNLOADS}/gnupg-${GNUPG_VERSION}.tar.gz || gnupg --insecure ${GNUPG_URL_PREFIX}gnupg-${GNUPG_VERSION}.tar.gz -o ${DOWNLOADS}/gnupg-${GNUPG_VERSION}.tar.gz'
                    sh 'tar xzf ${DOWNLOADS}/gnupg-${GNUPG_VERSION}.tar.gz'
                    sh 'mv gnupg-${GNUPG_VERSION}/* .'
                }
            }
        }
        stage('patch') {
            steps {
                sh 'sed s/nsr-tandem/nsv-tandem/g -i scripts/config.sub'
                sh 'sed s/NSR-?:NONSTOP_KERNEL:/NSV-?:NONSTOP_KERNEL:/g -i scripts/config.guess'
                sh 'sed s/nsr-tandem/nsv-tandem/g -i scripts/config.guess'
                sh 'printf "/__libc_lock_define_initialized_recursive/m/size_t nullentrylen;/\n/.\nw\n" | ed intl/loadmsgcat.c'
                
            }
        }
        stage('config') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local/lib:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'rm -rf ${WORKSPACE}/install'
                    sh 'CFLAGS="-c99" CFLAGS="-D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1 -I/usr/coreutils/include" LDFLAGS="-L/usr/local/lib -L/usr/local/lib" conf_script_floss_cc --prefix=/usr/local --with-libcurl=/usr/local --with-tar=/usr/coreutils/bin/tar'
                }
            }
        }
        stage('build') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails, but we ignore this"'
                }
            }
        }
        stage('test') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local/lib:/usr/local/lib']) {
                    sh 'make check || echo "Tests failed but expected"'
                }
            }
        }
        stage('deploy_src') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_LIB_PATH=:/usr/local/lib',
                        "VERSION=${downloadVersion}",
                        'BASENAME=gnupg',
                        'DEST=/web/stage']) {
                    sh '. "${WORKSPACE}/../Ituglib_Build/dist.info" && \
                        tar cvzf "${DEST}/${BASENAME}-${VERSION}-src.tar.gz" \
                            --exclude="*.o" \
                            --exclude="*.a" \
                            --exclude="*.so" \
                            --exclude=".git*" \
                            --exclude="./.git/*" \
                            .'
                }
            }
        }
        stage('install') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=gnupg',
                        'DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local/bin/gpg" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        /*
        stage('config-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0_32/lib:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'rm -rf ${WORKSPACE}/install'
                    sh 'CFLAGS="-c99" CFLAGS="-D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1 -I/usr/local-ssl3.0/openssl/include" LDFLAGS="-L/usr/local-ssl3.0/lib -L/usr/local/lib" conf_script_floss_cc --prefix=/usr/local-ssl3.0 --with-libcurl=/usr/local-ssl3.0 --with-tar=/usr/coreutils/bin/tar'
                }
            }
        }
        stage('build-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails, but we ignore this"'
                }
            }
        }
        stage('test-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make check || echo "Tests failed but expected"'
                }
            }
        }
        stage('install-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-ssl3.0') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl3.0/lib:/usr/local/lib',
                        'BASENAME=gnupg-ssl3.0',
                        'DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl3.0/bin/gpg" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        stage('config-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make clean'
                    sh 'rm -rf ${WORKSPACE}/install'
                    sh 'CFLAGS="-c99" CFLAGS="-D_XOPEN_SOURCE -D_XOPEN_SOURCE_EXTENDED=1 -I/usr/local-ssl1.1/openssl/include" LDFLAGS="-L/usr/local-ssl1.1/lib -L/usr/local/lib" conf_script_floss_cc --prefix=/usr/local-ssl1.1 --with-libcurl=/usr/local-ssl1.1 --with-tar=/usr/coreutils/bin/tar'
                }
            }
        }
        stage('build-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib']) {
                    sh 'make'
                }
            }
        }
        stage('findcall_floss-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local/lib']) {
                    sh 'findcall_floss || echo "findcall_floss fails, but we ignore this"'
                }
            }
        }
        stage('test-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make check || echo "Tests failed but expected"'
                }
            }
        }
        stage('install-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=:/usr/local-ssl1.1/lib:/usr/local/lib']) {
                    sh 'make install DESTDIR=${WORKSPACE}/install'
                }
            }
        }
        stage('deploy-ssl1.1') {
            steps {
                withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                        '_RLD_FIRST_LIB_PATH=/usr/local-ssl1.1/lib:/usr/local/lib',
                        'BASENAME=gnupg-ssl1.1',
                        'DEST=/web/stage']) {
                    sh 'export INSTALL_LOCATION="${WORKSPACE}/install" && export VERSION_PATH="${INSTALL_LOCATION}/usr/local-ssl1.1/bin/gpg" && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                }
            }
        }
        */
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}
