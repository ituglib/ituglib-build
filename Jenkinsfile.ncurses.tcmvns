/* Ncurses TNS/V Pipeline */

def buildVersion

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    triggers {
        pollSCM('H H H * *')
    }
    stages {
        stage('setup') {
            steps {
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '', description: 'NCurses Version', name: 'input'),
                        ])
                    buildVersion = userInput
                }
            }
        }
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "refs/tags/v${buildVersion}"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout']],
                    doGenerateSubmoduleConfigurations: false, extensions: [
                        [$class: 'CleanCheckout'],
                        [$class: 'CloneOption', timeout: 120, shallow: true],
                        [$class: 'CheckoutOption', timeout: 120],
                        ],
                    userRemoteConfigs: [[url: 'https://github.com/mirror/ncurses.git']]])
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
                sh 'sed "/#define intptr_t long/!{p;d};n;a #if defined (__TANDEM)" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;a # if ! defined (__cplusplus)" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;n;a #  define intptr_t long" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;n;n;a # endif" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;n;n;n;a #else" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;n;n;n;n;a # define intptr_t long" -i configure'
                sh 'sed "/#define intptr_t long/!{p;d};n;n;n;n;n;n;n;a #endif" -i configure'
                sh 'sed "/#define intptr_t long/d" -i configure'
            }
        }
        stage('wide') {
            stages() {
                stage('config') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh 'CC=c11 CXX="c11 -Wcplusplus -Wversion4" CFLAGS="-WRVU=L17.08 -D_XOPEN_SOURCE_EXTENDED=1 -DHAVE_IOSTREAM_NAMESPACE=1 -DHAVE_IOSTREAM=1 -Wmultibyte_char" ./configure --prefix=/usr/local/lib'
                        }
                    }
                }
                stage('build') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make'
                        }
                    }
                }
                stage('findcall_floss') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                /*
                stage('test') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_FIRST_LIB_PATH=${WORKSPACE}:/usr/local/lib make -j4 V=1 test || echo "might fail"'
                        }
                    }
                }
                */
                stage('install') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make install DESTDIR=${WORKSPACE}/install CFLAGS="-WRVU=L17.08"'
                        }
                    }
                }
                stage('deploy') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=ncurses',
                                "PRODUCT_BASE_VERSION=${buildVersion}",
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
        stage('wide-lp64') {
            stages() {
                stage('config') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh 'CC=c11 CXX="c11 -Wcplusplus -Wversion4 -Wlp64" CFLAGS="-Wlp64 -D_XOPEN_SOURCE_EXTENDED=1 -DHAVE_IOSTREAM_NAMESPACE=1 -DHAVE_IOSTREAM=1 -Wmultibyte_char" LDFLAGS="-Wlp64" ./configure --prefix=/usr/local/lib64'
                        }
                    }
                }
                stage('build') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make'
                        }
                    }
                }
                stage('findcall_floss') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                /*
                stage('test') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'OPENSSL_MODULES=${WORKSPACE}/providers _RLD_FIRST_LIB_PATH=${WORKSPACE}:/usr/local/lib make -j4 V=1 test || echo "might fail"'
                        }
                    }
                }
                */
                stage('install') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make install DESTDIR=${WORKSPACE}/install CFLAGS="-WRVU=L17.08"'
                        }
                    }
                }
                stage('deploy') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=ncurses_64',
                                "PRODUCT_BASE_VERSION=${buildVersion}",
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local/lib64 && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nsx && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins TCMVNS] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
        success {
            cleanWs()
        }
    }
}
