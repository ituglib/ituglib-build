/* OpenSSL 3.1 TNS/E Pipeline Complete. */

def buildVersion

pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
    }
    triggers {
        pollSCM('H H H H *')
    }
    stages {
        stage('setup') {
            steps {
			    script {
                    def userInput = input(id: 'userInput', message: 'Build Settings?',
                        parameters: [
                            string(defaultValue: '', description: 'OpenSSL Version', name: 'input'),
                        ])
                    buildVersion = userInput
                }
            }
        }
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: "refs/tags/openssl-${buildVersion}"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout']],
                    doGenerateSubmoduleConfigurations: false, extensions: [
                        [$class: 'CleanCheckout'],
                        [$class: 'CloneOption', timeout: 120, shallow: true],
                        [$class: 'CheckoutOption', timeout: 120],
                        ],
                    userRemoteConfigs: [[url: 'https://github.com/openssl/openssl.git']]])
                dir('../Ituglib_Build') {
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        extensions: [
                            [$class: 'CleanBeforeCheckout']],
                        doGenerateSubmoduleConfigurations: false, extensions: [
                            [$class: 'CleanCheckout'],
                            [$class: 'CloneOption', timeout: 120, shallow: true],
                            [$class: 'CheckoutOption', timeout: 120],
                            [$class: 'IgnoreNotifyCommit'],
                            ],
                        userRemoteConfigs: [[url: 'https://github.com/ituglib/ituglib-build.git']]])
                }
            }
        }
        stage('Unthreaded') {
            stages() {
                stage('config') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh './Configure nonstop-nse_64 --prefix=/usr/local-ssl3.1 --openssldir=/usr/local-ssl3.1/ssl no-fips --with-rand-seed=egd'
                        }
                    }
                }
                stage('build') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make'
                        }
                    }
                }
                stage('findcall') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                stage('test') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}:/usr/local/lib make test'
                        }
                    }
                }
                stage('install') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib64:/usr/local/lib && make install DESTDIR=${WORKSPACE}/install'
                        }
                    }
                }
                stage('deploy') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=openssl',
                                'PRODUCT_BASE_VERSION=3.1',
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib64:/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
        stage('unthreaded-32') {
            stages() {
                stage('config-32') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh './Configure nonstop-nse --prefix=/usr/local-ssl3.1 --openssldir=/usr/local-ssl3.1/ssl  no-fips --with-rand-seed=egd'
                        }
                    }
                }
                stage('build-32') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make CFLAGS="-WRVU=L16.05"'
                        }
                    }
                }
                stage('findcall-32') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                stage('test-32') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}:/usr/local/lib make -j4 V=1 test || echo "will fail at 80-test_cmp_http"'
                        }
                    }
                }
                stage('install-32') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib:/usr/local/lib && make install DESTDIR=${WORKSPACE}/install CFLAGS="-WRVU=L16.05"'
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib:/usr/local/lib && make install_fips DESTDIR=${WORKSPACE}/install CFLAGS="-WRVU=L16.05"'
                        }
                    }
                }
                stage('deploy-32') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=openssl-32',
                                'PRODUCT_BASE_VERSION=3.1',
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib:/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
        stage('PUT') {
            stages() {
                stage('config-put') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh './Configure nonstop-nse_64_put --prefix=/usr/local-ssl3.1 --openssldir=/usr/local-ssl3.1/ssl no-fips --with-rand-seed=egd threads "-D_REENTRANT"'
                        }
                    }
                }
                stage('build-put') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make'
                        }
                    }
                }
                stage('findcall-put') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                stage('test-put') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}:/usr/local/lib make test'
                        }
                    }
                }
                stage('install-put') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib64-put:/usr/local/lib && make install DESTDIR=${WORKSPACE}/install'
                        }
                    }
                }
                stage('deploy-put') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=openssl-put',
                                'PRODUCT_BASE_VERSION=3.1',
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib64-put:/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
        stage('SPT') {
            stages() {
                stage('config-spt') {
                    steps() {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'git clean -dxf'
                            sh './Configure nonstop-nse_spt_floss --prefix=/usr/local-ssl3.1 --openssldir=/usr/local-ssl3.1/ssl no-fips --with-rand-seed=egd threads "-D_REENTRANT"'
                        }
                    }
                }
                stage('build-spt') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'make'
                        }
                    }
                }
                stage('findcall-spt') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh 'findcall_floss || echo "might fail"'
                        }
                    }
                }
                stage('test-spt') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}:/usr/local/lib make test || echo "Test Failed But Ignored"'
                        }
                    }
                }
                stage('install-spt') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib-spt:/usr/local/lib && make install DESTDIR=${WORKSPACE}/install'
                        }
                    }
                }
                stage('deploy-spt') {
                    steps {
                        withEnv(['PATH=/usr/coreutils/bin:/usr/local/bin:/usr/bin:/bin:/usr/ucb',
                                '_RLD_LIB_PATH=:/usr/local/lib',
                                'BASENAME=openssl-spt',
                                'PRODUCT_BASE_VERSION=3.1',
                                'DEST=/web/stage']) {
                            sh '_RLD_LIB_PATH=${WORKSPACE}/install/usr/local-ssl3.1/lib-spt:/usr/local/lib && export INSTALL_LOCATION="${WORKSPACE}/install/" && export VERSION_PATH="${INSTALL_LOCATION}/.." && . ${WORKSPACE}/../Ituglib_Build/dist.info.nse && bash ${WORKSPACE}/../Ituglib_Build/package.bin.nomanifest'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            mail bcc: '', body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\nDuration: ${currentBuild.durationString}\nChange: ${currentBuild.changeSets}\n More info at: ${env.BUILD_URL}", cc: '', from: 'rsbecker@nexbridge.com', replyTo: '', subject: "[Jenkins HPITUG] ${currentBuild.currentResult}: job ${env.JOB_NAME}", to: 'rsbecker@nexbridge.com'
        }
    }
}
